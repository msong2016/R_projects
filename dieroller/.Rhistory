}
pair_six
}
pair_six
pair_six <- rep(0)
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
pair_six
pair_six <- rep(0)
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
pair_six
pair_six <- rep(0)
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
sum(pair_six)
}
sum(pair_six)
pair_six <- rep(0)
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
sixesII <- rep(0)
for(i in 1:1000) {
sixesII[i] <- sum(pair_six)
}
sixesII
pair_six <- rep(0)
sixesII <- rep(0)
for(i in 1:1000) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
sixesII[i] <- sum(pair_six)
}
sixesII
die()
die()
make_roll(die()$sides, 100)
library(dieroller)
make_roll(die()$sides, 100)
a <- rep(0)
for(i in 1:1000) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[i] <- pair_six[i]
}
a
a <- rep(0)
for(i in 1:2) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[i] <- pair_six[i]
}
a
a <- rep(0)
for(s in 1:2) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- pair_six[s]
}
a
a <- rep(0)
for(s in 1:10) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- pair_six[s]
}
a
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- pair_six[s]
}
a
a <- rep(0)
for(s in 1:20) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- pair_six[s]
}
a
a <- rep(0)
for(s in 1:30) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- pair_six[s]
}
a
a <- rep(0)
for(s in 1:30) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a
num_of_gamesII <- sum(a != 0)
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die(), 4)
one_sixes <- sum(one$rolls == 6)
two <- roll(die(), 4)
two_sixes <- sum(two$rolls == 6)
if(one_sixes != 0 & two_sixes != 0) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
num_of_gamesII <- sum(a != 0)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
one <- roll(die(), 4)
two <- roll(die(), 4)
one == two
one <- roll(die(), 4)
two <- roll(die(), 4)
one
one[1:4]
one[1:4] == two[1:4]
one <- roll(die(), 4)
one
two
one <- roll(die(), 4)
one
two <- roll(die(), 4)
two
one == two
one[1:4] == two[1:4]
one <- roll(die(), 4)
one <- roll(die(), 4)
one <- roll(die(), 4)
one
two <- roll(die(), 4)
two
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one == two) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == two[1]) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
roll(die())
roll(die())[1]
roll(die())[1] == 4
roll(die())[[1]] == 4
roll(die())[[1]]
roll(die())[[1]] == 5
roll(die())[[1]] == 5
a <- roll(die())
a
a[]
a[] == 3
a[1] == 3
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a
library(dieroller)
# simulate one series of 1000 games of this game-I.
#each game involves rolling a die four times.
# this means that you will end up generating a total of 4000 rolls.
sixesI <- rep(0)
for(i in 1:1000) {
gameI <- roll(die(), 4)
sixesI[i] <- sum(gameI$rolls == 6)
}
#count the number of games in which there is at least one 6.
num_of_gamesI <- sum(sixesI != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqI <- num_of_gamesI / 1000
relative_freqI
#confirm:
1 - (5/6) ^ 4
a <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a
gameII <- roll(die(), 48)
sixesII[i] <- sum(gameII$rolls == 6)
}
a <- rep(0)
for(s in 1) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
a[s] <- sum(pair_six)
}
a
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
pair_six
gameII <- rep(0)
for(s in 1) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
gameII[s] <- sum(pair_six)
}
#count the number of games in which there is at least one double 6.
num_of_gamesII <- sum(gameII != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
gameII <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
gameII[s] <- sum(pair_six)
}
#count the number of games in which there is at least one double 6.
num_of_gamesII <- sum(gameII != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
#confirm:
1 - (35/36) ^ 24
relative_freqII
#confirm:
1 - (35/36) ^ 24
gameII <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
gameII[s] <- sum(pair_six)
}
#count the number of games in which there is at least one double 6.
num_of_gamesII <- sum(gameII != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
#confirm:
1 - (35/36) ^ 24
gameII <- rep(0)
pair_six <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
gameII[s] <- sum(pair_six)
}
#count the number of games in which there is at least one double 6.
num_of_gamesII <- sum(gameII != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
#confirm:
1 - (35/36) ^ 24
gameII <- rep(0)
pair_six <- rep(0)
for(s in 1:1000) {
for(i in 1:24) {
one <- roll(die())
two <- roll(die())
if(one[1] == 6 & two[1] == 6) {
pair_six[i] <- 1
} else {
pair_six[i] <- 0
}
}
gameII[s] <- sum(pair_six)
}
#count the number of games in which there is at least one double 6.
num_of_gamesII <- sum(gameII != 0)
#then compute the relative frequency of getting at least one "6" (this will be the approximate probability)
relative_freqII <- num_of_gamesII / 1000
relative_freqII
#confirm:
1 - (35/36) ^ 24
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
